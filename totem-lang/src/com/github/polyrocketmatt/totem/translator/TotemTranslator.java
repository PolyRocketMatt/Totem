package com.github.polyrocketmatt.totem.translator;

import com.github.polyrocketmatt.totem.TotemPhase;
import com.github.polyrocketmatt.totem.exception.ParserException;
import com.github.polyrocketmatt.totem.exception.TotemException;
import com.github.polyrocketmatt.totem.exception.TranslatorException;
import com.github.polyrocketmatt.totem.node.Node;
import com.github.polyrocketmatt.totem.node.ObjectNode;
import com.github.polyrocketmatt.totem.utils.IdentityResolver;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

/**
 * Created by PolyRocketMatt on 29/09/2020.
 *
 * Turn the AST generated by the parser into
 * C++ files. It will also keep a hold of every
 * object, method, variable created to check here
 * if the generated code will be valid code.
 */

public class TotemTranslator implements TotemPhase {

    /** The roots of the current source */
    private List<Node> roots;

    /** The file that has to be written to */
    private File object;

    /**
     * Initialize a new translator.
     *
     * @param roots the roots of the source
     * @throws TotemException if a problem with IO has occurred
     */
    public TotemTranslator(List<Node> roots) throws TotemException {
        this.roots = roots;
        try {
            this.object = new File("C:\\Users\\" + System.getProperty("user.name") + "\\Totem\\translation.cpp");
            if (this.object.exists())
                this.object.delete();
            this.object.getParentFile().mkdirs();
            this.object.createNewFile();
        } catch (IOException ex) {
            throw new TranslatorException("Couldn't create new file!");
        }
    }

    /**
     * Translate the given AST into C++.
     *
     * @throws ParserException if an exception occurred during translation
     */
    @Override
    public void process() throws TotemException {
        try {
            IdentityResolver resolver = new IdentityResolver(7);

            for (Node root : roots) {
                ObjectTranslator objectTranslator = new ObjectTranslator((ObjectNode) root, resolver);

                FileWriter writer = new FileWriter(object, true);
                String source = objectTranslator.translate();

                //   Write
                writer.write(source);

                //   Close writer safely
                writer.close();
            }
        } catch (IOException ex) {
            //TODO: Proper error reporting using TotemException

            ex.printStackTrace();
        }
    }
}
