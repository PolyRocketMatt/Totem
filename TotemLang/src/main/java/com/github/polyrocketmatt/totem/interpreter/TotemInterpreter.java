package com.github.polyrocketmatt.totem.interpreter;

import com.github.polyrocketmatt.totem.TotemPhase;
import com.github.polyrocketmatt.totem.exception.InterpreterException;
import com.github.polyrocketmatt.totem.exception.TotemException;
import com.github.polyrocketmatt.totem.node.Node;
import com.github.polyrocketmatt.totem.node.ParentNode;
import com.github.polyrocketmatt.totem.utils.representables.RepresentableParent;
import com.github.polyrocketmatt.totem.utils.representables.RepresentableValue;
import com.github.polyrocketmatt.totem.utils.representables.ValueHolder;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Stack;

/**
 * Created by PolyRocketMatt on 03/10/2020.
 *
 * The interpreter used to translate the written Totem code.
 */

public class TotemInterpreter implements TotemPhase {

    /** The parent generated by the parser */
    private ParentNode parent;

    /** The representable parent */
    private RepresentableParent representableParent;

    /** A stack of computational results */
    private Stack<RepresentableValue> representableValues;

    /** The current value-holder */
    private ValueHolder holder;

    /** All value-holders */
    private List<ValueHolder> holders;

    /**
     * Initialize an interpreter.
     *
     * @param parent the parent generated by the parser
     */
    public TotemInterpreter(ParentNode parent) {
        this.parent = parent;
        this.representableParent = new RepresentableParent();
        this.representableValues = new Stack<>();
        this.holder = representableParent;
        this.holders = new ArrayList<>(Collections.singleton(holder));
    }

    /**
     * Get the representable parent.
     *
     * @return the representable parent
     */
    public RepresentableParent getRepresentableParent() {
        return representableParent;
    }

    /**
     * Get the stack of computational results.
     *
     * @return the stack of computational results
     */
    public Stack<RepresentableValue> getRepresentableValues() {
        return representableValues;
    }

    /**
     * Get the current value-holder.
     *
     * @return the value-holder
     */
    public ValueHolder getHolder() {
        return holder;
    }

    /**
     * Set the new value-holder.
     *
     * @param holder the value-holder
     */
    public void setHolder(ValueHolder holder) {
        this.holder = holder;

        if (!holders.contains(holder))
            holders.add(holder);
    }

    /**
     * Get a list of all the holders.
     *
     * @return the holders
     */
    public List<ValueHolder> getHolders() {
        return holders;
    }

    /**
     * Interpret the generated AST.
     *
     * @throws TotemException if an exception occurs
     */
    @Override
    public void process() throws TotemException {
        try {
            visit(this.parent);
        } catch (InterpreterException ex) {
            System.out.println(ex.getError());
        }
    }

    /**
     * The main visitor function.
     *
     * @param node the node to visit
     */
    public void visit(Node node) {
        node.visit(this);
    }

}
