package com.github.polyrocketmatt.totem.interpreter;

import com.github.polyrocketmatt.totem.TotemPhase;
import com.github.polyrocketmatt.totem.exception.InterpreterException;
import com.github.polyrocketmatt.totem.exception.TotemException;
import com.github.polyrocketmatt.totem.node.Node;
import com.github.polyrocketmatt.totem.node.ParentNode;
import com.github.polyrocketmatt.totem.utils.RepresentableValue;

import java.util.Stack;

/**
 * Created by PolyRocketMatt on 03/10/2020.
 *
 * The interpreter used to translate the written Totem code.
 */

public class TotemInterpreter implements TotemPhase {

    /** The parent generated by the parser */
    private ParentNode parent;

    /** A stack of computational results */
    private Stack<RepresentableValue> computationalResults;

    /**
     * Initialize an interpreter.
     *
     * @param parent the parent generated by the parser
     */
    public TotemInterpreter(ParentNode parent) {
        this.parent = parent;

        this.computationalResults = new Stack<>();
    }

    /**
     * Get the stack of computational results.
     *
     * @return the stack of computational results.
     */
    public Stack<RepresentableValue> getComputationalResults() {
        return computationalResults;
    }

    @Override
    public void process() throws TotemException {
        try {
            visit(this.parent);

            for (RepresentableValue computationalRes : computationalResults)
                System.out.println(computationalRes);
        } catch (InterpreterException ex) {
            System.out.println(ex.getError());
        }
    }

    /**
     * The main visitor function.
     *
     * @param node the node to visit
     */
    public void visit(Node node) {
        node.visit(this);
    }

}
